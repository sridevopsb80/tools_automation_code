# To create a self-hosted github runner

## Documentation: https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/adding-self-hosted-runners
## Go to https://github.com/organizations/sridevopsb80/settings/actions/runners -> Create self-hosted runner for steps to add a self-hosted runner to github actions


#######################################
# In order to facilitate configuration on the server side, we need to setup authorization between ec2 and github using github cli. Since the execution of this part ran into issues via automation, the following steps need to be run manually.
# Note: Do not perform the below steps as root user. The user we use should be the same as the user we use for Grab token task section. Here the defined user is ec2-user

# Documentation for github cli installation: https://github.com/cli/cli/blob/trunk/docs/install_linux.md
# Documentation to create a registration token for an organization: https://docs.github.com/en/rest/actions/self-hosted-runners?apiVersion=2022-11-28#create-a-registration-token-for-an-organization. Follow the github cli example provided there.

#Steps:

# Download and Install github cli in remote machine

## sudo curl -L -o /etc/yum.repos.d/gh-cli.repo https://cli.github.com/packages/rpm/gh-cli.repo
## sudo dnf install gh -y

# Authenticate to github.

## gh auth login
## gh auth refresh -h github.com -s admin:org

## you will be provided with a web link to login. use a browser to authenticate the device in github while provisioning a server

#########################################
# Documentation to create a registration token for an organization: https://docs.github.com/en/rest/actions/self-hosted-runners?apiVersion=2022-11-28#create-a-registration-token-for-an-organization. Follow the github cli example provided there.
# Below is the command (taken from the github cli example section of the github authentication documentation page) that is required to obtain the token. Replace ORG with your github organization info, such as sridevopsb80.

##
##  gh api \
##  --method POST \
##  -H "Accept: application/vnd.github+json" \
##  -H "X-GitHub-Api-Version: 2022-11-28" \
##  /orgs/ORG/actions/runners/registration-token

## gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/sridevopsb80/actions/runners/registration-token | jq .token is being used to just get the token from the output

## This output cannot be pasted as is in yml. Refer the below documentation to see how multi-line output can be provided.
## https://stackoverflow.com/questions/3790454/how-do-i-break-a-string-in-yaml-over-multiple-lines
## Refer Grab Token section.

#

- name: Setup Prompt
  ansible.builtin.shell: set-prompt github-runner

# Adding a user
- name: Add Github Runner User
  ansible.builtin.user:
    name: grunner

- name: Create github directory
  ansible.builtin.file:
    path: /actions-runner
    state: directory
    owner: grunner
    group: grunner

- name: Download & Extract Runner
  ansible.builtin.unarchive:
    src: https://github.com/actions/runner/releases/download/v2.317.0/actions-runner-linux-x64-2.317.0.tar.gz
    dest: "/actions-runner"
    remote_src: yes
    owner: grunner
    group: grunner

#Commenting this portion out as it is handled manually
#- name: Download GitHub Cli Repo
#  ansible.builtin.get_url: #will download files from a url
#    url: https://cli.github.com/packages/rpm/gh-cli.repo
#    dest: /etc/yum.repos.d/gh-cli.repo

#- name: Install github cli
#  ansible.builtin.dnf:
#    name: gh-cli
#    state: latest

- name: Grab Token
  ansible.builtin.shell: |
    gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/sridevopsb80/actions/runners/registration-token | jq .token
  register: token #using token since we have token defined in the shell command under configure github runner
  become_user: ec2-user # Token has to be fetched by ec2-user as gh login was done by that user.

#Commenting out below section since it is only to be used for testing
#- name: Print token
#  ansible.builtin.debug:
#    msg: "{{ token }}"

- name: Install libicu dependency
  ansible.builtin.dnf:
    name: libicu
    state: latest

# To make sure that the installation runs only when the count is 0, we are getting the runner count and introducing conditional that count == 0 in later parts

- name: Get the runner count
  ansible.builtin.shell: |
    gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/sridevopsb80/actions/runners | jq .total_count |xargs
  register: runner_count
  become_user: ec2-user

#Create the runner and start the configuration experience

##Refer Configure section under https://github.com/organizations/sridevopsb80/settings/actions/runners -> Create self-hosted runner

##./config.sh --url https://github.com/sridevopsb80 --token BJ6WX5PVNULOWGF4MLI74G3HICUOU

## The below info is appended to the above command, since we are prompted for it during execution
## --runnergroup Default -> runnergroup name
## --name ec2 -> name added for the runner
## --labels rhel -> label value added
## --work _work -> work folder defined
## --replace -> to replace existing runner if there are any present


- name: Configure Github Runner
  ansible.builtin.shell: ./config.sh --url https://github.com/sridevopsb80 --token {{ token.stdout }} --runnergroup Default --name ec2 --labels rhel --work _work --replace
  args:
    chdir: /actions-runner #this is the directory being used. Refer Create github directory
  become_user: grunner #command should not be run as root user
  when: runner_count.stdout == "0" #conditional that runner count has to be 0. we are using "" since output is strings

#while running the above command manually, we notice that it requires libicu dependency, which needs to be installed in the previous step

#To run the service, below steps need to be done.
#Login to the remote server as grunner -> cd /actions-runner -> ./run.sh to start the runner.
#sudo -i
#./svc.sh install grunner -> service will be started as grunner user
#./svc.sh start
#./svc.sh will show available options, including install, uninstall, start and stop

- name: Install Runner Service
  ansible.builtin.shell: ./svc.sh install grunner ;  ./svc.sh start
  args:
    chdir: /actions-runner
  when: runner_count.stdout == "0" #conditional that runner count has to be 0. we are using "" since output is strings

- name: Download Terraform Repo file
  ansible.builtin.get_url:
    url: https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
    dest: /etc/yum.repos.d/hashicorp.repo

- name: Install Terraform
  ansible.builtin.dnf:
    name: terraform
    state: latest